import { Mod, Skin, Logic } from "../util.slint";
import { Button, VerticalBox, StyleMetrics, HorizontalBox, ListView, StandardListView, GroupBox, ComboBox, GridBox, AboutSlint} from "std-widgets.slint";

component ModItem inherits Rectangle {
    in-out property <Mod> mod: { text: "PLACE_HOLDER"};
    in property <int> type: 0;

    area := TouchArea {
        clicked => {
            Logic.active-mod(mod.id);
        }
     }

    Rectangle {
        background: area.has-hover ? Skin.palette.box.brighter(40%) : Skin.palette.box;
        Rectangle {
            x: 0px;
            border-radius: 2px;
            width: 9px;
            y: (parent.height - self.height) / 2;
            background: area.pressed ? Skin.palette.menuBar : Colors.rgba(0,0,0,0);
            animate height{
                    duration: 250ms;
            }

            states [
                not-hovered when !area.pressed: {
                    height:0px;

                }
                hovered when area.pressed: {
                    height:25px;
                }
            ]
        }

        Rectangle {
            border-width: 4px;
            border-color: Skin.palette.mainContent;
            HorizontalBox {
                padding: 15px;

                Text {
                    text: mod.text;
                }
            }
        }
    }
}



component ModList inherits GroupBox {
    in-out property <[Mod]> mods: [];

    ListView {
        vertical-stretch: 0;
        for mod in mods: ModItem {
            type: 1;
            mod: mod;
        }
    }
}

export component ModListTab inherits VerticalLayout {
    padding: 0px;

    in property <Mod> active-mod;
    in property <bool> active-mod-active;

    in property <[Mod]> enabled-mods;
    in property <[Mod]> disabled-mods;

    callback remove-mod <=> deletebtn.clicked;
    callback move-mod <=> movebtn.clicked;

    // height: self.visible ? self.preferred-height : 0px;

    VerticalBox {
        HorizontalBox {
            Text {
                font-size: Skin.LargeFont;
                text: "Selected Mod: " + active-mod.text;
            }
        }

        HorizontalBox {
            Text {
                text: " Mod ID: " + active-mod.id;
            }
        }

        HorizontalBox {
            Text {
                text: " Mod Author: " + active-mod.author;
                width: max(self.preferred-width, 400px);
            }
            Text {
                text: " Mod Version: " + active-mod.version;
            }
        }

        HorizontalBox {
            Text {
                text: active-mod.description;
                wrap: word-wrap;
            }
        }

        HorizontalBox {
            deletebtn := Button {
                text: " Remove";
            }
            movebtn := Button {
                text: " Move";
            }
                // if (active-mod.nexus != ""):
            Button {
                text: " Visit Nexus";
            }
        }

        animate height {
            duration: 250ms;
        }
        states [
            open when active-mod-active: {
                height: self.preferred-height;
            }
            closed when !active-mod-active: {
                height: 0px;
                visible: false;
            }
        ]
    }
    if (root.visible):
    HorizontalBox {
        vertical-stretch: 1;
        ModList {
            title: " Disabled Mods";
            mods: disabled-mods;
        }
        ModList {
            title: " Enabled Mods";
            mods: enabled-mods;
        }
    }

    if (root.visible):
    HorizontalBox {
        Button {
            text: " Check for updates";
        }
    }
}


