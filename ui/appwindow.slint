import { Button, VerticalBox, StyleMetrics, HorizontalBox, ListView, StandardListView, GroupBox, ComboBox, GridBox, AboutSlint} from "std-widgets.slint";
import "../assets/fa-regular-400.ttf";
import "../assets/Font Awesome 6 Brands-Regular-400.otf";
import "../assets/Font Awesome 6 Free-Regular-400.otf";

struct Mod {
    text: string,
    description: string,
    author: string,
    active: bool,
    version: string,
    id: string,
    path: string,
    nexus: string
}

struct Palette  {
    menuBar : brush,
    mainContent : brush,
    box : brush,
    lightDisplay : brush,
    pieChart : brush,
    roundButton : brush,
    weekdayBox : brush,
    text : brush,
    shadow : brush,
}


global Skin {
    in property <bool> day: !StyleMetrics.dark-color-scheme;
    out property <Palette> palette: {
       menuBar : #2937A7,
       mainContent : #040404,
       box : #101010,
       lightDisplay : #000000,
       pieChart : #000000,
       roundButton : #0a0a0a,
       weekdayBox : #0c0c0c,
       text : #fff,
       shadow : #fff1, // ### added alpha
    };
    // From Skin::initHints in Skin.cpp
    out property <length> DefaultFont: 12px;
    out property <length> TinyFont: 9px;
    out property <length> SmallFont: 10px;
    out property <length> MediumFont: 13px;
    out property <length> LargeFont: 20px;
    out property <length> HugeFont: 27px;
    // (also, bold)
    out property <length> TitleFont: 10px;
    // (also, bold)
}

export global Logic  {
    in-out property <int> the-value;

    pure callback mod-move(string);
    pure callback update-ui();
    pure callback active-mod(string);
    pure callback switch-mod(string);
}


component ModItem inherits Rectangle {
    in-out property <Mod> mod: { text: "PLACE_HOLDER"};
    in property <int> type: 0;

    area := TouchArea {
        clicked => {
            Logic.active-mod(mod.id);
        }
     }

    Rectangle {
        background: area.has-hover ? Skin.palette.box.brighter(40%) : Skin.palette.box;
        Rectangle {
            x: 0px;
            border-radius: 2px;
            width: 9px;
            y: (parent.height - self.height) / 2;
            background: area.pressed ? Skin.palette.menuBar : Colors.rgba(0,0,0,0);
            animate height{
                    duration: 250ms;
            }

            states [
                not-hovered when !area.pressed: {
                    height:0px;

                }
                hovered when area.pressed: {
                    height:25px;
                }
            ]
        }

        Rectangle {
            border-width: 4px;
            border-color: Skin.palette.mainContent;
            HorizontalBox {
                padding: 15px;

                Text {
                    text: mod.text;
                }
            }
        }
    }
}

component ModList inherits GroupBox {
    in-out property <[Mod]> mods: [];

    ListView {
        vertical-stretch: 0;
        for mod in mods: ModItem {
            type: 1;
            mod: mod;
        }
    }
}

export component AppWindow inherits Window {
    preferred-width: 700px;
    preferred-height: 800px;
    title: "Stardew Valley Mod Manager";

    default-font-family: "Roboto, 'Font Awesome 6 Free'";

    in-out property <[Mod]> enabledMods: [{ text:"Abilities - Experience Bars"}];
    in-out property <[Mod]> disabledMods: [{ text:"A Bonafide Special Blue Chicken"}, { text:"Access Chest Anywhere"}];

    in property <[string]> profiles: ["Preset 1", "Preset 2", "Preset 3"];
    in property <string> profile: "Preset 1";

    callback select-change <=> combo.selected;
    callback switch-mod <=> movebtn.clicked;
    callback delete-mod <=> deletebtn.clicked;

    background: Skin.palette.mainContent;

    in-out property <Mod> active-mod;
    in-out property <bool> active-mod-active;

    VerticalBox {
        padding: 0px;
        Image {
            image-fit: fill;
            source: @image-url("/opt/dev/stardew-mod-manager/assets/ui.jpg");
            width: 100%;
            height: active-mod-active ? min(self.preferred-height, 75px) : 200px;
            animate height {
                duration: 100ms;
            }
        }

        HorizontalBox {
            GridLayout {
                spacing: 5px;
                Row {
                    Text { }

                    Text {
                        text: @tr(" Preset");
                        width: self.preferred-width + 10px;
                    }

                    combo := ComboBox {
                        width: max(self.preferred-width + 10px, 100px);
                        height: self.preferred-height;
                        model: profiles;
                        current-value: profile;
                    }
                }
            }
        }


         VerticalBox {
            visible: active-mod-active;
            height: active-mod-active ?  self.preferred-height : 0px;

                Text {
                    font-size: Skin.LargeFont;
                    text: @tr("Selected Mod: ") + active-mod.text;
                }


            HorizontalBox {
                Text {
                    text: " Mod ID: " + active-mod.id;
                }
            }
            HorizontalBox {
                Text {
                    text: " Mod Author: " + active-mod.author;
                    width: max(self.preferred-width, 400px);
                }
                Text {
                    text: " Mod Version: " + active-mod.version;
                }
            }

            HorizontalBox {
                deletebtn := Button {
                    text: " Remove";
                }
                movebtn := Button {
                    text: " Move";

                }
                // if (active-mod.nexus != ""):
                Button {
                    text: " Visit Nexus";
                }
            }

            animate height {
                duration: 250ms;
             }
        }

        HorizontalBox {
            vertical-stretch: 1;

            ModList {

                title: " Disabled Mods";
                mods: disabledMods;
            }
            ModList {
                title: " Enabled Mods";
                mods: enabledMods;
            }
        }

        HorizontalBox {
            Button {
                text: " Check for updates";
            }
        }
    }
}

